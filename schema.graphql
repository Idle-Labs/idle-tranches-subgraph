type CDODeployedEvent @entity {
  id: ID!
  proxy: Bytes!
}

type CDO @entity {
  id: ID!
  AATrancheToken: Tranche!
  BBTrancheToken: Tranche!

  underlyingToken: Bytes!
  strategy: Bytes!
  strategyToken: Bytes!
}

enum TrancheType {
  AATranche
  BBTranche
}

type Tranche @entity {
  id: ID!
  type: TrancheType!
  CDO: CDO!

  totalSupply: BigInt!
}

type TrancheInfo @entity {
  id: ID!
  Tranche: Tranche!
  timeStamp: BigInt!
  totalSupply: BigInt!
  virtualPrice: BigInt!
  contractValue: BigInt!
}

type depositAAEvent @entity {
  id: ID!
  tranche: Tranche!
  amount: BigInt!
  sender: Bytes!
}

type depositBBEvent @entity {
  id: ID!
  tranche: Tranche!
  amount: BigInt!
  sender: Bytes!
}

type withdrawAAEvent @entity {
  id: ID!
  tranche: Tranche!
  amount: BigInt!
  sender: Bytes!
}

type withdrawBBEvent @entity {
  id: ID!
  tranche: Tranche!
  amount: BigInt!
  sender: Bytes!
}

type transferAA @entity {
  id: ID!
  tranche: Tranche!
  amount: BigInt!
  sender: Bytes!

  from: Bytes!
  to: Bytes!
}

type transferBB @entity {
  id: ID!
  tranche: Tranche!
  amount: BigInt!
  sender: Bytes!
  
  from: Bytes!
  to: Bytes!
}
